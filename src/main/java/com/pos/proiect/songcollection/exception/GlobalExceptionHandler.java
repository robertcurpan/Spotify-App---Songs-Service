package com.pos.proiect.songcollection.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.sql.SQLIntegrityConstraintViolationException;
import java.time.LocalDateTime;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(value = { ArtistNotFoundException.class })
    public ResponseEntity<ErrorObject> handleArtistNotFoundException(ArtistNotFoundException ex, WebRequest request) {
        String errorMessage = "The artist was not found!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_FOUND, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(value = { SongNotFoundException.class })
    public ResponseEntity<ErrorObject> handleSongNotFoundException(SongNotFoundException ex, WebRequest request) {
        String errorMessage = "The song was not found!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_FOUND, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(value = { CantCreateWithPutMethodException.class })
    public ResponseEntity<ErrorObject> handleCantCreateWithPutMethodException(CantCreateWithPutMethodException ex, WebRequest request) {
        String errorMessage = "You cannot create a new song with a PUT method because the songs in the database have an autogenerated ID assiged." +
                " For consistency purposes, we won't let you create a song with an ID specified by you!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.CONFLICT, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(value = { ResourceIdentifierIsNullException.class })
    public ResponseEntity<ErrorObject> handleResourceIdentifierIsNullException(ResourceIdentifierIsNullException ex, WebRequest request) {
        String errorMessage = "The resource identifier is NULL!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_ACCEPTABLE, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_ACCEPTABLE);
    }

    @ExceptionHandler(value = { SongIsAlreadyAssignedToAnAlbumException.class })
    public ResponseEntity<ErrorObject> handleSongIsAlreadyAssignedToAnAlbumException(SongIsAlreadyAssignedToAnAlbumException ex, WebRequest request) {
        String errorMessage = "The song is already assigned to the specified album!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.CONFLICT, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(value = { SongIsNotAssignedToAnAlbumException.class })
    public ResponseEntity<ErrorObject> handleSongIsNotAssignedToAnAlbumException(SongIsNotAssignedToAnAlbumException ex, WebRequest request) {
        String errorMessage = "The song is not assigned to an album!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_FOUND, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(value = { SongIsAlreadyAssignedToArtistException.class })
    public ResponseEntity<ErrorObject> handleSongIsAlreadyAssignedToArtistException(SongIsAlreadyAssignedToArtistException ex, WebRequest request) {
        String errorMessage = "The song is already assigned to the specified artist!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.CONFLICT, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(value = { SongIsNotAssignedToArtistException.class })
    public ResponseEntity<ErrorObject> handleSongIsNotAssignedToArtistException(SongIsNotAssignedToArtistException ex, WebRequest request) {
        String errorMessage = "The song is not assigned to the specified artist!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_FOUND, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(value = { UUIDFormatException.class })
    public ResponseEntity<ErrorObject> handleUUIDFormatException(UUIDFormatException ex, WebRequest request) {
        String errorMessage = "The resource identifier must have a UUID format!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_ACCEPTABLE, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_ACCEPTABLE);
    }

    @ExceptionHandler(value = { SQLIntegrityConstraintViolationException.class })
    public ResponseEntity<ErrorObject> handleSQLIntegrityConstraintViolationException(SQLIntegrityConstraintViolationException ex, WebRequest request) {
        String errorMessage = "SQL Integrity Constraint Violation! Some attributes from the request body are missing or null!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_ACCEPTABLE, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_ACCEPTABLE);
    }

    @ExceptionHandler(value = { AlbumDoesNotExistException.class })
    public ResponseEntity<ErrorObject> handleAlbumDoesNotExistException(AlbumDoesNotExistException ex, WebRequest request) {
        String errorMessage = "Album with id " + ex.getAlbumId() + " does not exist!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_ACCEPTABLE, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_ACCEPTABLE);
    }

    @ExceptionHandler(value = { NumberFormatException.class })
    public ResponseEntity<ErrorObject> handleNumberFormatException(NumberFormatException ex, WebRequest request) {
        String errorMessage = "Song id must be a number!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_ACCEPTABLE, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_ACCEPTABLE);
    }

    @ExceptionHandler(value = { AlbumCanNotBePartOfAnotherAlbumException.class })
    public ResponseEntity<ErrorObject> handleAlbumCanNotBePartOfAnotherAlbumException(AlbumCanNotBePartOfAnotherAlbumException ex, WebRequest request) {
        String errorMessage = "An album can not be part of another album!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.NOT_ACCEPTABLE, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.NOT_ACCEPTABLE);
    }

    @ExceptionHandler(value = { AccessForbiddenException.class })
    public ResponseEntity<ErrorObject> handleAccessForbiddenException(AccessForbiddenException ex, WebRequest request) {
        String errorMessage = "You don't have the proper role for this operation!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.FORBIDDEN, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.FORBIDDEN);
    }

    @ExceptionHandler(value = { JwsSignatureNotValidException.class })
    public ResponseEntity<ErrorObject> handleJwsSignatureNotValidException(JwsSignatureNotValidException ex, WebRequest request) {
        String errorMessage = "Jws signature is not valid!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.UNAUTHORIZED, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(value = { JwsTokenCouldNotBeValidatedException.class })
    public ResponseEntity<ErrorObject> handleJwsTokenCouldNotBeValidatedException(JwsTokenCouldNotBeValidatedException ex, WebRequest request) {
        String errorMessage = "Jws token could not be validated!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.UNAUTHORIZED, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(value = { JwsFormatNotValidException.class })
    public ResponseEntity<ErrorObject> handleJwsFormatNotValidException(JwsFormatNotValidException ex, WebRequest request) {
        String errorMessage = "Jws format is not valid!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.UNAUTHORIZED, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(value = { JwsExpiredException.class })
    public ResponseEntity<ErrorObject> handleJwsExpiredException(JwsExpiredException ex, WebRequest request) {
        String errorMessage = "Jws expired!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.UNAUTHORIZED, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(value = { AuthorizationHeaderMissingException.class })
    public ResponseEntity<ErrorObject> handleAuthorizationHeaderMissingException(AuthorizationHeaderMissingException ex, WebRequest request) {
        String errorMessage = "Missing authorization header!";
        ErrorObject errorObject = new ErrorObject(errorMessage, HttpStatus.UNAUTHORIZED, LocalDateTime.now());
        return new ResponseEntity<ErrorObject>(errorObject, HttpStatus.UNAUTHORIZED);
    }
}
